import pandas as pd
import numpy as np
import pickle
import sklearn
import xgboost as xgb

class methylationPrediction:
    """
    A class which trains models to predict methylation for a given set
    of CpG sites and samples using the feature matrices generated by a
    mutationFeatures object
    """
    def __init__(
        self,
        out_dir: str,
        train_samples: list,
        test_samples: list
        ) -> None:
        self.out_dir = out_dir
        self.train_samples = train_samples
        self.test_samples = test_samples
        self.trained_models = {}

    def train_one_model(
        self,
        cpg_id: str,
        X: pd.DataFrame,
        y: pd.Series,
        model_type: str
        ) -> None:
        """
        Train a model of given type to predict methylation for a certain CpG
        @ cpg_id: the id of the CpG site
        @ X: the mutation feature matrix for the CpG site
        @ y: the target methylation values for the CpG site
        @ model_type: the type of model to train
        @ returns: None
        """
        if model_type == 'elasticNet':
            model = sklearn.linear_model.ElasticNetCV()
        elif model_type == 'linreg':
            model = sklearn.linear_model.LinearRegression()
        elif model_type == 'rand_forest':
            model = sklearn.ensemble.RandomForestRegressor()
        elif model_type == 'lasso':
            model = sklearn.linear_model.LassoCV()
        # fit model to training samples
        model.fit(X.loc[self.train_samples], y.loc[self.train_samples])
        # add to trained models dictionary
        self.trained_models[cpg_id] = model
        return
    
    def train_all_models(
        self, 
        mut_feat_store: str,
        model_type: str
        ) -> None:
        """
        Given a mutation features store, train a model for each
        cpg and features in the store
        @ mut_feat_store: the path to the mutation features store
        @ model_type: the type of model to train
        @ returns: None
        """
        # read in the mutation features store from the pickle file
        with open(mut_feat_store, 'rb') as f:
            mut_feat_store = pickle.load(f)        
        # for each cpg in the store train a model
        for cpg_id in mut_feat_store['cpg_ids']:
            # for each feature set in the store train a model
            self.train_one_model(
                cpg_id = cpg_id,
                X = mut_feat_store['feat_mats'][cpg_id],
                y = mut_feat_store['target_values'][cpg_id],
                model_type=model_type
                )
            print(f"done {cpg_id}")
        return